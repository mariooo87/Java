/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edunova.view;

import edunova.controller.ObradaNekretnina;
import edunova.model.Nekretnina;
import edunova.model.SlikaNekretnine;
import java.awt.Color;
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.imgscalr.Scalr;

/**
 *
 * @author Mario
 */
public class Nekretnine extends javax.swing.JFrame {

    private ObradaNekretnina obradaNekretnina;
    private Nekretnina odabrano;

    public Nekretnine() {
        initComponents();
        setIcon();
        setLocationRelativeTo(null);
        obradaNekretnina = new ObradaNekretnina();
        lista.setModel(new DefaultListModel<Nekretnina>());
        setTitle("Nekretnine");

        slike.setCellRenderer(new StavkaListeSlika());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        uvjet = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        akcijaTrazi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        vrsta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        godinaizgradnje = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        lokacija = new javax.swing.JTextField();
        akcijaOdustani = new javax.swing.JButton();
        akcijaDodajNovi = new javax.swing.JButton();
        akcijaPromjeni = new javax.swing.JButton();
        akcijaObrisi = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        stambenapovrsina = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        povrsinaokucnice = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        vrstagrijanja = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cijena = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        brojetaza = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        brojsoba = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        vlasnickilist = new javax.swing.JCheckBox();
        gradevinskadozvola = new javax.swing.JCheckBox();
        uporabnadozvola = new javax.swing.JCheckBox();
        jLabel15 = new javax.swing.JLabel();
        prodaja = new javax.swing.JCheckBox();
        kupnja = new javax.swing.JCheckBox();
        akcijaDodajSliku = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        slike = new javax.swing.JList();
        akcijaObrisiSliku = new javax.swing.JButton();
        akcijaPretvoriValutu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Smjerovi");

        jLabel1.setText("Uvjet (* za sve)");

        akcijaTrazi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Magnifier2.png"))); // NOI18N
        akcijaTrazi.setText("Traži");
        akcijaTrazi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaTraziActionPerformed(evt);
            }
        });

        lista.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lista);

        jLabel4.setText("Vrsta nekretnine");

        jLabel5.setText("Godina izgradnje");

        jLabel6.setText("Lokacija");

        akcijaOdustani.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Cancel__Red.png"))); // NOI18N
        akcijaOdustani.setText("Odustani");
        akcijaOdustani.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaOdustaniActionPerformed(evt);
            }
        });

        akcijaDodajNovi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Plus__Orange.png"))); // NOI18N
        akcijaDodajNovi.setText("Dodaj novi");
        akcijaDodajNovi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaDodajNoviActionPerformed(evt);
            }
        });

        akcijaPromjeni.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/Pencil3.png"))); // NOI18N
        akcijaPromjeni.setText("Promjeni");
        akcijaPromjeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaPromjeniActionPerformed(evt);
            }
        });

        akcijaObrisi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/DeleteRed.png"))); // NOI18N
        akcijaObrisi.setText("Obriši");
        akcijaObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaObrisiActionPerformed(evt);
            }
        });

        jLabel2.setText("Stambena površina [m2]");

        jLabel3.setText("Površina okućnice [m2]");

        jLabel7.setText("Vrsta grijanja");

        jLabel8.setText("Cijena [eur]");

        jLabel9.setText("Broj etaža");

        jLabel10.setText("Broj soba");

        jLabel11.setText("Vlasnički list");

        jLabel12.setText("Građevinska dozvola");

        jLabel13.setText("Uporabna dozvola");

        vlasnickilist.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/real_estate_picture.jpg"))); // NOI18N

        prodaja.setText("Prodaje se");
        prodaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prodajaActionPerformed(evt);
            }
        });

        kupnja.setText("Kupuje se");
        kupnja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kupnjaActionPerformed(evt);
            }
        });

        akcijaDodajSliku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/folder-picture-24.png"))); // NOI18N
        akcijaDodajSliku.setText("Dodaj");
        akcijaDodajSliku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaDodajSlikuActionPerformed(evt);
            }
        });

        slike.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                slikeMouseClicked(evt);
            }
        });
        slike.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                slikeValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(slike);

        akcijaObrisiSliku.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/delete-file.png"))); // NOI18N
        akcijaObrisiSliku.setText("Obriši");
        akcijaObrisiSliku.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaObrisiSlikuActionPerformed(evt);
            }
        });

        akcijaPretvoriValutu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/reload_page.png"))); // NOI18N
        akcijaPretvoriValutu.setText(" KN u EUR");
        akcijaPretvoriValutu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                akcijaPretvoriValutuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(akcijaDodajSliku, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(akcijaObrisiSliku, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(akcijaOdustani, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(akcijaDodajNovi, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(akcijaPromjeni, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(akcijaObrisi, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(akcijaPretvoriValutu, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(uvjet, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(akcijaTrazi, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(30, 30, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(brojetaza, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(stambenapovrsina, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(lokacija, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(vrsta, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(26, 26, 26))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel6)
                                                    .addComponent(jLabel2)
                                                    .addComponent(jLabel9)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(jLabel13)
                                                            .addComponent(jLabel11)
                                                            .addComponent(jLabel12))
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(gradevinskadozvola)
                                                            .addComponent(vlasnickilist)
                                                            .addComponent(uporabnadozvola)))
                                                    .addComponent(jLabel4))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cijena, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(kupnja, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(prodaja))
                                    .addComponent(jLabel5)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel15)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10)
                                            .addComponent(godinaizgradnje)
                                            .addComponent(jLabel7)
                                            .addComponent(vrstagrijanja)
                                            .addComponent(jLabel3)
                                            .addComponent(povrsinaokucnice)
                                            .addComponent(brojsoba, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uvjet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(akcijaTrazi))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vrsta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(godinaizgradnje, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lokacija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(vrstagrijanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stambenapovrsina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(povrsinaokucnice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(brojetaza, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(brojsoba, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(prodaja)
                                .addGap(6, 6, 6)
                                .addComponent(kupnja)
                                .addGap(16, 16, 16)
                                .addComponent(akcijaPretvoriValutu, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(akcijaDodajSliku)
                                    .addComponent(akcijaObrisiSliku)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(jLabel12)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(vlasnickilist))
                                        .addGap(6, 6, 6)
                                        .addComponent(uporabnadozvola)
                                        .addGap(10, 10, 10)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(gradevinskadozvola)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cijena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(40, 40, 40)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(akcijaOdustani)
                    .addComponent(akcijaDodajNovi)
                    .addComponent(akcijaPromjeni)
                    .addComponent(akcijaObrisi))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void akcijaTraziActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaTraziActionPerformed

        cistiPolja();

        List<Nekretnina> entiteti = obradaNekretnina.dohvati(uvjet.getText());

        DefaultListModel<Nekretnina> m = new DefaultListModel<>();
        for (Nekretnina e : entiteti) {
            m.addElement(e);
        }
        lista.setModel(m);

    }//GEN-LAST:event_akcijaTraziActionPerformed

    private void listaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaValueChanged
        reset();
        odabrano = (Nekretnina) lista.getSelectedValue();
        if (odabrano == null) {
            return;
        }

        vrsta.setText(odabrano.getVrsta());
        godinaizgradnje.setText(String.valueOf(odabrano.getGodinaizgradnje()));
        lokacija.setText(String.valueOf(odabrano.getLokacija()));
        stambenapovrsina.setText(String.valueOf(odabrano.getStambenapovrsina()));
        povrsinaokucnice.setText(String.valueOf(odabrano.getPovrsinaokucnice()));
        vrstagrijanja.setText(String.valueOf(odabrano.getVrstagrijanja()));
        cijena.setText(String.valueOf(odabrano.getCijena()));
        brojetaza.setText(String.valueOf(odabrano.getBrojetaza()));
        brojsoba.setText(String.valueOf(odabrano.getBrojsoba()));
        vlasnickilist.setSelected(odabrano.isVlasnickilist());
        gradevinskadozvola.setSelected(odabrano.isGradevinskadozvola());
        uporabnadozvola.setSelected(odabrano.isUporabnadozvola());
        prodaja.setSelected(odabrano.isProdaja());
        kupnja.setSelected(odabrano.isKupnja());

        ucitajSliku();


    }//GEN-LAST:event_listaValueChanged

    private void akcijaOdustaniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaOdustaniActionPerformed
        dispose();
    }//GEN-LAST:event_akcijaOdustaniActionPerformed

    private void akcijaDodajNoviActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaDodajNoviActionPerformed
        reset();
        if (vrsta.getText().trim().isEmpty()) {
            greska(vrsta, "Obavezno vrsta nekretnine");
            return;
        }

        if (godinaizgradnje.getText().trim().isEmpty()) {
            greska(godinaizgradnje, "Obavezno godina izgradnje");
            return;
        }

        if (lokacija.getText().trim().isEmpty()) {
            greska(lokacija, "Obavezno lokacija");
            return;
        }

        if (stambenapovrsina.getText().trim().isEmpty()) {
            greska(stambenapovrsina, "Obavezno stambena površina");
            return;
        }

        if (povrsinaokucnice.getText().trim().isEmpty()) {
            greska(povrsinaokucnice, "Obavezno površina okućnice");
            return;
        }

        if (vrstagrijanja.getText().trim().isEmpty()) {
            greska(vrstagrijanja, "Obavezno vrsta grijanja");
            return;
        }

        if (cijena.getText().trim().isEmpty()) {
            greska(cijena, "Obavezno cijena");
            return;
        }

        if (brojetaza.getText().trim().isEmpty()) {
            greska(brojetaza, "Obavezno broj etaža");
            return;
        }

        if (brojsoba.getText().trim().isEmpty()) {
            greska(brojsoba, "Obavezno broj soba");
            return;
        }

        if (!prodaja.isSelected() && !kupnja.isSelected()) {
            greska(prodaja, "Obavezno odabrati da li je u pitanju prodaja ili kupnja");
            greska(kupnja, "Obavezno odabrati da li je u pitanju prodaja ili kupnja");
            return;
        }

        Nekretnina o = new Nekretnina();
        o.setVrsta(vrsta.getText().trim());
        o.setGodinaizgradnje(Integer.parseInt(godinaizgradnje.getText().trim()));
        o.setLokacija(lokacija.getText().trim());
        o.setStambenapovrsina(Integer.parseInt(stambenapovrsina.getText().trim()));
        o.setPovrsinaokucnice(Integer.parseInt(povrsinaokucnice.getText().trim()));
        o.setVrstagrijanja(vrstagrijanja.getText().trim());
        o.setCijena(new BigDecimal(cijena.getText().trim()));
        o.setBrojetaza(Integer.parseInt(brojetaza.getText().trim()));
        o.setBrojsoba(Integer.parseInt(brojsoba.getText().trim()));
        o.setVlasnickilist(vlasnickilist.isSelected());
        o.setGradevinskadozvola(gradevinskadozvola.isSelected());
        o.setUporabnadozvola(uporabnadozvola.isSelected());
        o.setProdaja(prodaja.isSelected());
        o.setKupnja(kupnja.isSelected());

        o = obradaNekretnina.dodaj(o);

        DefaultListModel<Nekretnina> m = (DefaultListModel<Nekretnina>) lista.getModel();
        m.addElement(o);

    }//GEN-LAST:event_akcijaDodajNoviActionPerformed

    private void akcijaPromjeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaPromjeniActionPerformed
        if (odabrano == null) {
            return;
        }
        reset();

        if (vrsta.getText().trim().isEmpty()) {
            greska(vrsta, "Obavezno vrsta nekretnine");
            return;
        }

        if (godinaizgradnje.getText().trim().isEmpty()) {
            greska(godinaizgradnje, "Obavezno godina izgradnje");
            return;
        }

        if (lokacija.getText().trim().isEmpty()) {
            greska(lokacija, "Obavezno lokacija");
            return;
        }

        if (stambenapovrsina.getText().trim().isEmpty()) {
            greska(stambenapovrsina, "Obavezno stambena površina");
            return;
        }

        if (povrsinaokucnice.getText().trim().isEmpty()) {
            greska(povrsinaokucnice, "Obavezno površina okućnice");
            return;
        }

        if (vrstagrijanja.getText().trim().isEmpty()) {
            greska(vrstagrijanja, "Obavezno vrsta grijanja");
            return;
        }

        if (cijena.getText().trim().isEmpty()) {
            greska(cijena, "Obavezno cijena");
            return;
        }

        if (brojetaza.getText().trim().isEmpty()) {
            greska(brojetaza, "Obavezno broj etaža");
            return;
        }

        if (brojsoba.getText().trim().isEmpty()) {
            greska(brojsoba, "Obavezno broj soba");
            return;
        }

        odabrano.setVrsta(vrsta.getText().trim());
        odabrano.setGodinaizgradnje(Integer.parseInt(godinaizgradnje.getText().trim()));
        odabrano.setLokacija(lokacija.getText().trim());
        odabrano.setStambenapovrsina(Integer.parseInt(stambenapovrsina.getText().trim()));
        odabrano.setPovrsinaokucnice(Integer.parseInt(povrsinaokucnice.getText().trim()));
        odabrano.setVrstagrijanja(vrstagrijanja.getText().trim());
        odabrano.setCijena(new BigDecimal(cijena.getText().trim()));
        odabrano.setBrojetaza(Integer.parseInt(brojetaza.getText().trim()));
        odabrano.setBrojsoba(Integer.parseInt(brojsoba.getText().trim()));
        odabrano.setVlasnickilist(vlasnickilist.isSelected());
        odabrano.setGradevinskadozvola(gradevinskadozvola.isSelected());
        odabrano.setUporabnadozvola(uporabnadozvola.isSelected());
        odabrano.setProdaja(prodaja.isSelected());
        odabrano.setKupnja(kupnja.isSelected());

        if (!obradaNekretnina.promjeni(odabrano)) {
            return;
        }

        lista.repaint();

    }//GEN-LAST:event_akcijaPromjeniActionPerformed

    private void akcijaObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaObrisiActionPerformed

        odabrano = (Nekretnina) lista.getSelectedValue();
        if (odabrano == null) {
            return;
        }
        if (JOptionPane.showConfirmDialog(getParent(), "Jeste li sigurni da želite obrisati: " + odabrano.getVrsta() + "?", "Brisanje nekretnine", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
            return;
        }

        if (!obradaNekretnina.obrisi(odabrano)) {
            return;
        }

        DefaultListModel<Nekretnina> m = (DefaultListModel<Nekretnina>) lista.getModel();
        m.removeElement(odabrano);
        lista.repaint();
        cistiPolja();
    }//GEN-LAST:event_akcijaObrisiActionPerformed

    private void prodajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prodajaActionPerformed
        if (prodaja.isSelected()) {
            kupnja.setSelected(false);
            return;
        }

        if (!prodaja.isSelected()) {
            kupnja.setSelected(true);

        }
    }//GEN-LAST:event_prodajaActionPerformed

    private void akcijaDodajSlikuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaDodajSlikuActionPerformed
        if (odabrano == null) {
            return;
        }

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Slike", "jpg", "png", "gif", "jpeg");

        JFileChooser fileChooser = new JFileChooser(System.getProperty("user.home"));
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showOpenDialog(getRootPane());

        if (returnVal == JFileChooser.APPROVE_OPTION) {

            BufferedImage novaSlika = null;
            try {

                novaSlika = ImageIO.read(fileChooser.getSelectedFile());
                File dat = new File("pictures" + File.separator + "pictures_nekretnine" + File.separator + odabrano.getSifra() + "_" + new Date().getTime() + ".jpg");

                if (dat.exists()) {
                    dat.renameTo(new File("pictures" + File.separator + "pictures_nekretnine" + File.separator + odabrano.getSifra() + "_" + new Date().getTime() + ".jpg"));

                }
                ImageIO.write(novaSlika, "jpg", dat);
            } catch (IOException ex) {
                Logger.getLogger(Nekretnine.class.getName()).log(Level.SEVERE, null, ex);
            }

            ucitajSliku();

        }

    }//GEN-LAST:event_akcijaDodajSlikuActionPerformed

    private void kupnjaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kupnjaActionPerformed
        if (kupnja.isSelected()) {
            prodaja.setSelected(false);
            return;
        }

        if (!kupnja.isSelected()) {
            prodaja.setSelected(true);

        }

    }//GEN-LAST:event_kupnjaActionPerformed

    private void slikeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_slikeValueChanged
        SlikaNekretnine s = (SlikaNekretnine) slike.getSelectedValue();
        if (s == null) {
            return;
        }
        System.out.println(s.getPutanja());
    }//GEN-LAST:event_slikeValueChanged

    private void akcijaObrisiSlikuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaObrisiSlikuActionPerformed
        SlikaNekretnine s = (SlikaNekretnine) slike.getSelectedValue();
        if (s == null) {
            return;
        }

        if (JOptionPane.showConfirmDialog(getParent(), "Jeste li sigurni da želite obrisati " + slike.getSelectedValue() + "?", "Brisanje slike", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
            return;
        }

        DefaultListModel<SlikaNekretnine> m = (DefaultListModel<SlikaNekretnine>) slike.getModel();
        m.removeElement(s);

        
            File d = new File(s.getPutanja());
            d.delete();

            slike.repaint();
        


    }//GEN-LAST:event_akcijaObrisiSlikuActionPerformed

    private void slikeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_slikeMouseClicked
        SlikaNekretnine s = (SlikaNekretnine) slike.getSelectedValue();
        if (s == null) {
            return;
        }

        new PreglednikSlika(odabrano).setVisible(true);


    }//GEN-LAST:event_slikeMouseClicked

    private void akcijaPretvoriValutuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_akcijaPretvoriValutuActionPerformed
        new PretvaracValuta().setVisible(true);
    }//GEN-LAST:event_akcijaPretvoriValutuActionPerformed

    private void ucitajSliku() {

        File folder = new File("pictures" + File.separator + "pictures_nekretnine" + File.separator);

        BufferedImage slikaSdiska;

        DefaultListModel<SlikaNekretnine> m = new DefaultListModel<>();
        SlikaNekretnine s;
        for (final File fileEntry : folder.listFiles()) {

            if (fileEntry.isDirectory()) {
                continue;
            }

            if (!fileEntry.getName().split("_")[0].equals(String.valueOf(odabrano.getSifra()))) {

                continue;
            }

            try {
                slikaSdiska = ImageIO.read(fileEntry);
                s = new SlikaNekretnine();
                s.setSlika(Scalr.resize(slikaSdiska, Scalr.Method.QUALITY, Scalr.Mode.AUTOMATIC,
                        200, 200, Scalr.OP_ANTIALIAS));
                s.setPutanja(fileEntry.getAbsolutePath());
                m.addElement(s);
            } catch (IOException ex) {
                Logger.getLogger(Nekretnine.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        slike.setModel(m);

    }

    private void cistiPolja() {
        vrsta.setText("");
        godinaizgradnje.setText("");
        lokacija.setText("");
        stambenapovrsina.setText("");
        povrsinaokucnice.setText("");
        vrstagrijanja.setText("");
        cijena.setText("");
        brojetaza.setText("");
        brojsoba.setText("");
        vlasnickilist.setSelected(false);
        gradevinskadozvola.setSelected(false);
        uporabnadozvola.setSelected(false);
        prodaja.setSelected(false);
        kupnja.setSelected(false);

    }

    private void reset() {

        for (Component c : this.getContentPane().getComponents()) {
            if (c instanceof JTextField || c instanceof JPasswordField) {
                JComponent jc = (JComponent) c;
                jc.setBackground(Color.white);
                jc.setToolTipText("");
            }
        }
    }

    private void greska(JComponent komponenta, String obavijest) {
        komponenta.setBackground(Color.red);
        komponenta.requestFocus();
        komponenta.setToolTipText(obavijest);

    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/pictures/real_estate_icon.jpg")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton akcijaDodajNovi;
    private javax.swing.JButton akcijaDodajSliku;
    private javax.swing.JButton akcijaObrisi;
    private javax.swing.JButton akcijaObrisiSliku;
    private javax.swing.JButton akcijaOdustani;
    private javax.swing.JButton akcijaPretvoriValutu;
    private javax.swing.JButton akcijaPromjeni;
    private javax.swing.JButton akcijaTrazi;
    private javax.swing.JTextField brojetaza;
    private javax.swing.JTextField brojsoba;
    private javax.swing.JTextField cijena;
    private javax.swing.JTextField godinaizgradnje;
    private javax.swing.JCheckBox gradevinskadozvola;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox kupnja;
    private javax.swing.JList lista;
    private javax.swing.JTextField lokacija;
    private javax.swing.JTextField povrsinaokucnice;
    private javax.swing.JCheckBox prodaja;
    private javax.swing.JList slike;
    private javax.swing.JTextField stambenapovrsina;
    private javax.swing.JCheckBox uporabnadozvola;
    private javax.swing.JTextField uvjet;
    private javax.swing.JCheckBox vlasnickilist;
    private javax.swing.JTextField vrsta;
    private javax.swing.JTextField vrstagrijanja;
    // End of variables declaration//GEN-END:variables
}
